
#############################################################
#
# Database template to read a real or virtual channel alarm
# information. The alarm data is not in continues block
# of memory so we need more than one asyn port.
# See st.cmd.alarm.
# 
# S - base PV name
# ND - name of this nanodac
# C - channel name
# CI - channel index number (1-4 or 1-32 for virtual channels)
# A - alarm index (1 or 2)
# ALARM_PORT - asyn port name for the alarm $(A) params
#
# Note: some of the floating point params in this template need
# their ESLO and PREC set, based on what the precision readback is.
#
############################################################

substitute "ALARM_PORT_A=$(ALARM_PORT)$(A)"

############################################################
# Read records
############################################################

# /// 
# /// Read the alarm type  
# ///
record(mbbi, "$(S)$(ND)$(C):Alarm$(A):Type")
{
  field(DESC, "Alarm $(A) Type")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(ALARM_PORT_A),0,1)")
  field(SCAN, "I/O Intr")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "10")
  field(NIVL, "11")
  field(TEVL, "12")
  field(ZRST, "None")
  field(ONST, "Abs High")
  field(TWST, "Abs Low")
  field(THST, "Dev High")
  field(FRST, "Dev Low")
  field(FVST, "Dev Band")
  field(SXST, "ROC Rising")
  field(SVST, "ROC Faling")
  field(EIST, "Dig Off")
  field(NIST, "Dig High")
  field(TEST, "Dig Low")
}

# /// 
# /// Read the alarm latch  
# ///
record(mbbi, "$(S)$(ND)$(C):Alarm$(A):Latch")
{
  field(DESC, "Alarm $(A) Latch")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(ALARM_PORT_A),1,1)")
  field(SCAN, "I/O Intr")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "None")
  field(ONST, "Auto")
  field(TWST, "Manual")
  field(THST, "Trigger")
}

# /// 
# /// Read the alarm threshold
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Threshold")
{
  field(DESC, "Alarm $(A) Threshold")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(ALARM_PORT_A),3,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
}

# /// 
# /// Read the alarm hysteresis
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Hyst")
{
  field(DESC, "Alarm $(A) Hyst")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(ALARM_PORT_A),4,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
}

# /// 
# /// Read the alarm reference.
# /// This is for deviation type alarms.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Ref")
{
  field(DESC, "Alarm $(A) Reference")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(ALARM_PORT_A),6,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
}

# /// 
# /// Read the alarm deviation.
# /// This is for deviation type alarms. It defines
# /// the width around the $(S)$(ND)$(C):Alarm$(A):Ref.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Dev")
{
  field(DESC, "Alarm $(A) Deviation")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(ALARM_PORT_A),7,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
}

# /// 
# /// Read the alarm amount.
# /// This is for rate of change (ROC) type alarms.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Amount")
{
  field(DESC, "Alarm $(A) Amount")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(ALARM_PORT_A),8,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
}

############################################################
# Write records
############################################################

# /// 
# /// Set the alarm type  
# /// NOTE: this doesn't work - I get an illegal memory
# /// address error (exception 2). But the read works fine.
# ///
record(mbbo, "$(S)$(ND)$(C):Alarm$(A):TypeSet")
{
  field(DESC, "Set Alarm $(A) Type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(ALARM_PORT_A)w,0,1)")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "10")
  field(NIVL, "11")
  field(TEVL, "12")
  field(ZRST, "None")
  field(ONST, "Abs High")
  field(TWST, "Abs Low")
  field(THST, "Dev High")
  field(FRST, "Dev Low")
  field(FVST, "Dev Band")
  field(SXST, "ROC Rising")
  field(SVST, "ROC Faling")
  field(EIST, "Dig Off")
  field(NIST, "Dig High")
  field(TEST, "Dig Low")
}

# /// 
# /// Set the alarm latch  
# /// NOTE: this doesn't work - I get an illegal memory 
# /// address error (exception 2). But the read works fine.
# ///
record(mbbo, "$(S)$(ND)$(C):Alarm$(A):LatchSet")
{
  field(DESC, "Set Alarm $(A) Latch")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(ALARM_PORT_A)w,1,1)")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "None")
  field(ONST, "Auto")
  field(TWST, "Manual")
  field(THST, "Trigger")
}

# /// 
# /// Set the alarm threshold
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):ThresholdSet")
{
  field(DESC, "Set Alarm $(A) Threshold")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(ALARM_PORT_A)w,3,1)")
  field(LINR, "LINEAR")
}

# /// 
# /// Set the alarm hysteresis
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):HystSet")
{
  field(DESC, "Set Alarm $(A) Hyst")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(ALARM_PORT_A)w,4,1)")
  field(LINR, "LINEAR")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm reference.
# /// This is for deviation type alarms.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):RefSet")
{
  field(DESC, "Set Alarm $(A) Reference")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(ALARM_PORT_A)w,6,1)")
  field(LINR, "LINEAR")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm deviation.
# /// This is for deviation type alarms. It defines
# /// the width around the $(S)$(ND)$(C):Alarm$(A):Ref.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):DevSet")
{
  field(DESC, "Set Alarm $(A) Deviation")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(ALARM_PORT_A)w,7,1)")
  field(LINR, "LINEAR")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm amount.
# /// This is for rate of change (ROC) type alarms.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):AmountSet")
{
  field(DESC, "Set Alarm $(A) Amount")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(ALARM_PORT_A)w,8,1)")
  field(LINR, "LINEAR")
  info(archive, "Monitor, 00:00:01, VAL")
}

############################################################
# Deal with the variable precision
############################################################

# ///
# /// Read the user $(U) resolution
# /// Based on this, set the PREC and ESLO fields
# /// in the various records.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Prec:Res")
{
  field(INP, "$(S)$(ND)$(C):PV_Res CP MS")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:ResSetCalc")
  info(archive, "Monitor, 00:00:01, VAL")
}

record(calcout, "$(S)$(ND)$(C):Alarm$(A):Prec:ResSetCalc")
{
  field(INPA, "$(S)$(ND)$(C):PV_Res.VAL NPP MS")
  field(CALC, "1/(10**A)")
  field(DOPT, "Use CALC")
  field(OOPT, "On Change")
  field(OUT, "$(S)$(ND)$(C):Alarm$(A):Prec:EsloSetPrec.VAL PP")
  info(archive, "Monitor, 00:00:01, VAL")
}

record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:EsloSetPrec")
{
  field(OMSL, "supervisory")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):Threshold.ESLO PP")
  field(OUTB, "$(S)$(ND)$(C):Alarm$(A):Hyst.ESLO PP")
  field(OUTC, "$(S)$(ND)$(C):Alarm$(A):Ref.ESLO PP")
  field(OUTD, "$(S)$(ND)$(C):Alarm$(A):Dev.ESLO PP")
  field(OUTE, "$(S)$(ND)$(C):Alarm$(A):ThresholdSet.ESLO NPP")
  field(OUTF, "$(S)$(ND)$(C):Alarm$(A):HystSet.ESLO NPP")
  field(OUTG, "$(S)$(ND)$(C):Alarm$(A):RefSet.ESLO NPP")
  field(OUTH, "$(S)$(ND)$(C):Alarm$(A):DevSet.ESLO NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:EsloSetPrec2")
}

record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:EsloSetPrec2")
{
  field(OMSL, "closed_loop")
  field(DOL, "$(S)$(ND)$(C):Alarm$(A):Prec:ResSetCalc.VAL")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):Amount.ESLO PP")
  field(OUTB, "$(S)$(ND)$(C):Alarm$(A):AmountSet.ESLO NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:ResSetPrec")
}

record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:ResSetPrec")
{
  field(OMSL, "closed_loop")
  field(DOL, "$(S)$(ND)$(C):Alarm$(A):Prec:Res.VAL NPP MS")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):Threshold.PREC PP")
  field(OUTB, "$(S)$(ND)$(C):Alarm$(A):Hyst.PREC PP")
  field(OUTC, "$(S)$(ND)$(C):Alarm$(A):Ref.PREC PP")
  field(OUTD, "$(S)$(ND)$(C):Alarm$(A):Dev.PREC PP")
  field(OUTE, "$(S)$(ND)$(C):Alarm$(A):ThresholdSet.PREC NPP")
  field(OUTF, "$(S)$(ND)$(C):Alarm$(A):HystSet.PREC NPP")
  field(OUTG, "$(S)$(ND)$(C):Alarm$(A):RefSet.PREC NPP")
  field(OUTH, "$(S)$(ND)$(C):Alarm$(A):DevSet.PREC NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:ResSetPrec2")
}

record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:ResSetPrec2")
{
  field(OMSL, "closed_loop")
  field(DOL, "$(S)$(ND)$(C):Alarm$(A):Prec:Res.VAL NPP MS")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):Amount.PREC PP")
  field(OUTB, "$(S)$(ND)$(C):Alarm$(A):AmountSet.PREC NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncHyst")
}

# ///
# /// The following records read the readback and set the 
# /// set records. We need to do this because we can only
# /// set ESLO and PREC on the set records after IOC init, 
# /// which means the set records typically are initialized 
# /// with PREC=0. So the set field can be out of sync with
# /// the readback. This solves that issue, but it's not nice.
# ///
record(seq, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncHyst")
{
  field(DLY1, "5")
  field(DOL1, "$(S)$(ND)$(C):Alarm$(A):Hyst.VAL NPP MS")
  field(LNK1, "$(S)$(ND)$(C):Alarm$(A):HystSet NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncRef")
}
record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncRef")
{
  field(OMSL, "closed_loop")
  field(DOL, "$(S)$(ND)$(C):Alarm$(A):Ref.VAL NPP MS")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):RefSet NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncThreshold")
}
record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncThreshold")
{
  field(OMSL, "closed_loop")
  field(DOL, "$(S)$(ND)$(C):Alarm$(A):Threshold.VAL NPP MS")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):ThresholdSet NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncDev")
}
record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncDev")
{
  field(OMSL, "closed_loop")
  field(DOL, "$(S)$(ND)$(C):Alarm$(A):Dev.VAL NPP MS")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):DevSet NPP")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncAlarm")
}
record(dfanout, "$(S)$(ND)$(C):Alarm$(A):Prec:SyncAlarm")
{
  field(VAL, "1")
  field(OUTA, "$(S)$(ND)$(C):AlarmLow.PROC PP")
  field(OUTB, "$(S)$(ND)$(C):AlarmHigh.PROC PP")
}

