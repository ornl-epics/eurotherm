
#############################################################
#
# Database template to read and write loop main variables 
# for the eurotherm nanodac.  
# 
# S - base PV name
# ND - name for this nanodac
# L - loop number
# PORT - asyn port name for loop main data
#
# Note: By convention the port name for the writeable parameters
# is the same as the read parameters, but with a 'w' on the end.
#
############################################################

############################################################
# Read records
############################################################

# ///
# /// Read the process variable used in this loop.
# /// This is usually set up on the controller.
# ///
record(ai, "$(S)$(ND)Loop$(L):PV")
{
  field(DESC, "Loop$(L) Process Variable")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),0,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
  field(ESLO, "0.1")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the setpoint
# ///
record(ai, "$(S)$(ND)Loop$(L):SP")
{
  field(DESC, "Loop$(L) Setpoint")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),2,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
  field(ESLO, "0.1")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the working setpoint
# ///
record(ai, "$(S)$(ND)Loop$(L):WSP")
{
  field(DESC, "Loop$(L) Working Setpoint")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),3,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
  field(ESLO, "0.1")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the auto/manual setting
# ///
record(bi, "$(S)$(ND)Loop$(L):Auto")
{
  field(DESC, "Loop$(L) Auto/Man")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),1,1)")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Auto")
  field(ONAM, "Manual")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the working loop output 
# ///
record(ai, "$(S)$(ND)Loop$(L):Output")
{
  field(DESC, "Loop$(L) Output")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),4,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
  field(ESLO, "0.1")
  field(PREC, "1")
  field(EGU, "%")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the loop inhibit status 
# ///
record(bi, "$(S)$(ND)Loop$(L):Inhibit")
{
  field(DESC, "Loop$(L) Inhibit")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),5,1)")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the if the setpoint ramp has been completed 
# ///
record(bi, "$(S)$(ND)Loop$(L):SP:RateDone")
{
  field(DESC, "Loop$(L) SP Rate Done")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),10,1)")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the loop error status 
# ///
record(ai, "$(S)$(ND)Loop$(L):Diag:Error")
{
  field(DESC, "Loop$(L) Error")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),13,1)")
  field(SCAN, "I/O Intr")
  field(LINR, "LINEAR")
  field(ESLO, "0.1")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the loop sensor break status 
# ///
record(bi, "$(S)$(ND)Loop$(L):Diag:SensorBreak")
{
  field(DESC, "Loop$(L) Sensor Break")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),19,1)")
  field(SCAN, "I/O Intr")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(ZSV, "NO_ALARM")
  field(OSV, "MAJOR")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the loop output low limit 
# ///
record(ai, "$(S)$(ND)Loop$(L):Diag:OutLow")
{
  field(DESC, "Loop$(L) Working Low Lim")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),20,1)")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
  field(EGU, "%")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the loop output high limit
# ///
record(ai, "$(S)$(ND)Loop$(L):Diag:OutHigh")
{
  field(DESC, "Loop$(L) Working High Lim")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),21,1)")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
  field(EGU, "%")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the proportional gain loop contribution 
# ///
record(ai, "$(S)$(ND)Loop$(L):Diag:POut")
{
  field(DESC, "Loop$(L) Prop. Output")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),16,1)")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the integral gain loop contribution 
# ///
record(ai, "$(S)$(ND)Loop$(L):Diag:IOut")
{
  field(DESC, "Loop$(L) Integral Output")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),17,1)")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the derivative gain loop contribution 
# ///
record(ai, "$(S)$(ND)Loop$(L):Diag:DOut")
{
  field(DESC, "Loop$(L) Deriv. Output")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT),18,1)")
  field(SCAN, "I/O Intr")
  field(PREC, "0")
  info(archive, "Monitor, 00:00:01, VAL")
}

############################################################
# Write records
############################################################

# /// 
# /// Set the loop auto/manual mode 
# ///
record(bo, "$(S)$(ND)Loop$(L):AutoSet")
{
  field(DESC, "Loop$(L) Auto/Man")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)w,1,1)")
  field(ZNAM, "Auto")
  field(ONAM, "Manual")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the loop setpoint demand value 
# ///
record(ao, "$(S)$(ND)Loop$(L):SPSet")
{
  field(DESC, "Set Loop$(L) Setpoint")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)w,2,1)")
  field(LINR, "LINEAR")
  field(ESLO, "0.1")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Inhibit the loop output 
# ///
record(bo, "$(S)$(ND)Loop$(L):InhibitSet")
{
  field(DESC, "Set Loop$(L) Inhibit")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)w,5,1)")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  info(archive, "Monitor, 00:00:01, VAL")
}

