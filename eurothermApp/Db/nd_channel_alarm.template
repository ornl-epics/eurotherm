#############################################################
#
# Database template to read and set alarm parameters for a
# channel on the eurotherm nanodac. 
#
# This is for the Channel.Alarm params.
# For list of address macros, see nd_channel.template

# Macros in addition to nd_channel.template:
# A - alarm index (1 or 2)
#
# Matt Pearson
# May 2020
#
############################################################

# ///
# /// Process this to manually read the alarms info
# ///
record(dfanout, "$(S)$(ND)$(C):ReadAlarm$(A)") {
  field(VAL, "1")
  field(OUTA, "$(S)$(ND)$(C):Alarm$(A):Type.PROC PP")
  field(OUTB, "$(S)$(ND)$(C):Alarm$(A):Latch.PROC PP")
  field(OUTC, "$(S)$(ND)$(C):Alarm$(A):Inhibit.PROC PP")
  field(OUTD, "$(S)$(ND)$(C):Alarm$(A):Threshold.PROC PP")
  field(OUTE, "$(S)$(ND)$(C):Alarm$(A):Hyst.PROC PP")
  field(OUTF, "$(S)$(ND)$(C):Alarm$(A):Ref.PROC PP")
  field(OUTG, "$(S)$(ND)$(C):Alarm$(A):Dev.PROC PP")
  field(OUTH, "$(S)$(ND)$(C):Alarm$(A):Amount.PROC PP")
}

# /// 
# /// Read the alarm type  
# ///
record(mbbi, "$(S)$(ND)$(C):Alarm$(A):Type") {
  field(DESC, "Alarm $(A) Type")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_ALARM_TYP),1)UINT16")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "10")
  field(NIVL, "11")
  field(TEVL, "12")
  field(ZRST, "None")
  field(ONST, "Abs High")
  field(TWST, "Abs Low")
  field(THST, "Dev High")
  field(FRST, "Dev Low")
  field(FVST, "Dev Band")
  field(SXST, "ROC Rising")
  field(SVST, "ROC Faling")
  field(EIST, "Dig Off")
  field(NIST, "Dig High")
  field(TEST, "Dig Low")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm latch  
# ///
record(mbbi, "$(S)$(ND)$(C):Alarm$(A):Latch") {
  field(DESC, "Alarm $(A) Latch")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_ALARM_LAT),1)UINT16")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "None")
  field(ONST, "Auto")
  field(TWST, "Manual")
  field(THST, "Trigger")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm inhibit state
# ///
record(bi, "$(S)$(ND)$(C):Alarm$(A):Inhibit") {
  field(DESC, "Alarm $(A) Inhibit")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_ALARM_INH),1)UINT16")
  field(ZNAM, "Not Inhibited")
  field(ONAM, "Inhibited")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm threshold
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Threshold") {
  field(DESC, "Alarm $(A) Threshold")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_THR),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm hysteresis
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Hyst") {
  field(DESC, "Alarm $(A) Hyst")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_HYS),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm reference.
# /// This is for deviation type alarms.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Ref") {
  field(DESC, "Alarm $(A) Reference")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_REF),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm deviation.
# /// This is for deviation type alarms. It defines
# /// the width around the $(S)$(ND)$(C):Alarm$(A):Ref.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Dev") {
  field(DESC, "Alarm $(A) Deviation")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_DEV),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm amount.
# /// This is for rate of change (ROC) type alarms.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Amount") {
  field(DESC, "Alarm $(A) Amount")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_AMO),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}



######################################################################
# Write records

# /// 
# /// Write 1 to acknowledge the alarm $(A)
# ///
record(bo, "$(S)$(ND)$(C):Alarm$(A)AckSet") {
  field(DESC, "Alarm Acknowledge")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)1w6,$(ADDR_ALARM_ACK),1)UINT16")
}

# /// 
# /// Enable or disable the alarm inhibit
# /// NOTE: Doesn't seem to work yet.
# ///
record(bo, "$(S)$(ND)$(C):Alarm$(A):InhibitSet") {
  field(DESC, "Alarm Acknowledge")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)1w6,$(ADDR_ALARM_INH),1)UINT16")
  field(ZNAM, "Not Inhibited")
  field(ONAM, "Inhibited")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Inhibit")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm threshold
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):ThresholdSet") {
  field(DESC, "Set Alarm $(A) Threshold")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_THR),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Threshold")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm hysteresis
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):HystSet") {
  field(DESC, "Set Alarm $(A) Hyst")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_HYS),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Hyst")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm reference.
# /// This is for deviation type alarms.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):RefSet") {
  field(DESC, "Set Alarm $(A) Reference")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_REF),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Ref")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm deviation.
# /// This is for deviation type alarms. It defines
# /// the width around the $(S)$(ND)$(C):Alarm$(A):Ref.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):DevSet") {
  field(DESC, "Set Alarm $(A) Deviation")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_DEV),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Dev")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm amount.
# /// This is for rate of change (ROC) type alarms.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):AmountSet") {
  field(DESC, "Set Alarm $(A) Amount")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_AMO),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Amount")
  info(archive, "Monitor, 00:00:01, VAL")
}


