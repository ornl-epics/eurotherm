#############################################################
#
# Database template to read and set alarm parameters for a
# channel on the eurotherm nanodac. 
#
# This is for the Channel.Alarm params.
# For list of address macros, see nd_channel.template

# Macros in addition to nd_channel.template:
# A - alarm index (1 or 2)
#
# Matt Pearson
# May 2020
#
############################################################

# ///
# /// Records to control the fast/slow poll behaviour for the below records
# ///
record(bo, "$(S)$(ND)$(C):PollFastAlarm$(A)") {
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A)")
}
record(bo, "$(S)$(ND)$(C):PollSlowAlarm$(A)") {
  field(SCAN, "10 second")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Type")
}

# ///
# /// Read the channel alarm $(A) status 
# ///
record(mbbi, "$(S)$(ND)$(C):Alarm$(A)") {
  field(DESC, "$(C) Alarm $(A)")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_ALARM),1)UINT16")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Off")
  field(ONST, "Active")
  field(TWST, "Safe Not Ack")
  field(THST, "Active Not Ack")
  field(ZRSV, "NO_ALARM")
  field(ONSV, "MINOR")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm type  
# ///
record(mbbi, "$(S)$(ND)$(C):Alarm$(A):Type") {
  field(DESC, "Alarm $(A) Type")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_ALARM_TYP),1)UINT16")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "10")
  field(NIVL, "11")
  field(TEVL, "12")
  field(ZRST, "None")
  field(ONST, "Abs High")
  field(TWST, "Abs Low")
  field(THST, "Dev High")
  field(FRST, "Dev Low")
  field(FVST, "Dev Band")
  field(SXST, "ROC Rising")
  field(SVST, "ROC Faling")
  field(EIST, "Dig Off")
  field(NIST, "Dig High")
  field(TEST, "Dig Low")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Latch")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm latch  
# ///
record(mbbi, "$(S)$(ND)$(C):Alarm$(A):Latch") {
  field(DESC, "Alarm $(A) Latch")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_ALARM_LAT),1)UINT16")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "None")
  field(ONST, "Auto")
  field(TWST, "Manual")
  field(THST, "Trigger")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Inhibit")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm inhibit state
# ///
record(bi, "$(S)$(ND)$(C):Alarm$(A):Inhibit") {
  field(DESC, "Alarm $(A) Inhibit")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_ALARM_INH),1)UINT16")
  field(ZNAM, "Not Inhibited")
  field(ONAM, "Inhibited")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Threshold")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm threshold
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Threshold") {
  field(DESC, "Alarm $(A) Threshold")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_THR),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Hyst")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm hysteresis
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Hyst") {
  field(DESC, "Alarm $(A) Hyst")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_HYS),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Ref")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm reference.
# /// This is for deviation type alarms.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Ref") {
  field(DESC, "Alarm $(A) Reference")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_REF),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Dev")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm deviation.
# /// This is for deviation type alarms. It defines
# /// the width around the $(S)$(ND)$(C):Alarm$(A):Ref.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Dev") {
  field(DESC, "Alarm $(A) Deviation")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_DEV),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  field(FLNK, "$(S)$(ND)$(C):Alarm$(A):Amount")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the alarm amount.
# /// This is for rate of change (ROC) type alarms.
# ///
record(ai, "$(S)$(ND)$(C):Alarm$(A):Amount") {
  field(DESC, "Alarm $(A) Amount")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_ALARM_AMO),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}



######################################################################
# Write records

# /// 
# /// Write 1 to acknowledge the alarm $(A)
# ///
record(bo, "$(S)$(ND)$(C):Alarm$(A)AckSet") {
  field(DESC, "Alarm Acknowledge")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)1w6,$(ADDR_ALARM_ACK),1)UINT16")
}

# /// 
# /// Enable or disable the alarm inhibit
# /// NOTE: Doesn't seem to work yet.
# ///
record(bo, "$(S)$(ND)$(C):Alarm$(A):InhibitSet") {
  field(DESC, "Alarm Acknowledge")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)1w6,$(ADDR_ALARM_INH),1)UINT16")
  field(ZNAM, "Not Inhibited")
  field(ONAM, "Inhibited")
}

# /// 
# /// Set the alarm threshold
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):ThresholdSet") {
  field(DESC, "Set Alarm $(A) Threshold")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_THR),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm hysteresis
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):HystSet") {
  field(DESC, "Set Alarm $(A) Hyst")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_HYS),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm reference.
# /// This is for deviation type alarms.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):RefSet") {
  field(DESC, "Set Alarm $(A) Reference")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_REF),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm deviation.
# /// This is for deviation type alarms. It defines
# /// the width around the $(S)$(ND)$(C):Alarm$(A):Ref.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):DevSet") {
  field(DESC, "Set Alarm $(A) Deviation")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_DEV),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the alarm amount.
# /// This is for rate of change (ROC) type alarms.
# ///
record(ao, "$(S)$(ND)$(C):Alarm$(A):AmountSet") {
  field(DESC, "Set Alarm $(A) Amount")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w6,$(ADDR_ALARM_AMO),1)FLOAT32_BE")
  field(PREC, "$(PREC)")
  info(archive, "Monitor, 00:00:01, VAL")
}


