#############################################################
#
# Database template to read and set loop 1 or 2 'main' parameters.
#
# Address macros:
# ADDR_LOOP__PV - the loop PV (32-bit range)
# ADDR_LOOP_TSP - the loop target setpoint (32-bit range)
# ADDR_LOOP_WSP - the loop working setpoint (32-bit range)
# ADDR_LOOP__AM - the loop auto/manual mode (16-bit range)
# ADDR_LOOP_OUT - the loop output % (32-bit range)
# ADDR_LOOP_INH - the loop inhibit status (16-bit range)
#
# Macros in addition to nd.template:
# L - loop index (1 or 2)
#
# Matt Pearson
# May 2020
#
############################################################

# ///
# /// Read/poll the parameters for this loop.main
# ///
record(dfanout, "$(S)$(ND)Loop$(L):Read") {
  field(VAL, "1")
  field(OUTA, "$(S)$(ND)Loop$(L):Poll.PROC PP")
  field(OUTB, "$(S)$(ND)Loop$(L):Auto.PROC PP")
  field(OUTC, "$(S)$(ND)Loop$(L):Inhibit.PROC PP")
}
record(calcout, "$(S)$(ND)Loop$(L):Poll") {
  field(INPA, "$(S)$(ND)PollCtrl")
  field(CALC, "A")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use CALC")
  field(OUT, "$(S)$(ND)Loop$(L):PollFan.PROC PP")
  info(autosaveFields, "SCAN")
  info(archive, "Monitor, 00:00:01, SCAN")
}
record(dfanout, "$(S)$(ND)Loop$(L):PollFan") {
  field(VAL, "1")
  field(OUTA, "$(S)$(ND)Loop$(L):PV.PROC PP")
  field(OUTB, "$(S)$(ND)Loop$(L):SP.PROC PP")
  field(OUTC, "$(S)$(ND)Loop$(L):WSP.PROC PP")
  field(OUTD, "$(S)$(ND)Loop$(L):Output.PROC PP")
}

# ///
# /// Read the process variable used in this loop.
# /// This is usually set up on the controller.
# ///
record(ai, "$(S)$(ND)Loop$(L):PV") {
  field(DESC, "Loop$(L) Process Variable")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_LOOP__PV),1)FLOAT32_BE")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the setpoint
# ///
record(ai, "$(S)$(ND)Loop$(L):SP") {
  field(DESC, "Loop$(L) Setpoint")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_LOOP_TSP),1)FLOAT32_BE")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the working setpoint
# ///
record(ai, "$(S)$(ND)Loop$(L):WSP") {
  field(DESC, "Loop$(L) Working Setpoint")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_LOOP_WSP),1)FLOAT32_BE")
  field(PREC, "1")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the auto/manual setting
# ///
record(bi, "$(S)$(ND)Loop$(L):Auto") {
  field(DESC, "Loop$(L) Auto/Man")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_LOOP__AM),1)UINT16")
  field(ZNAM, "Auto")
  field(ONAM, "Manual")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the working loop output 
# ///
record(ai, "$(S)$(ND)Loop$(L):Output") {
  field(DESC, "Loop$(L) Output")
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT)2w4,$(ADDR_LOOP_OUT),1)FLOAT32_BE")
  field(PREC, "1")
  field(EGU, "%")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Read the loop inhibit status 
# ///
record(bi, "$(S)$(ND)Loop$(L):Inhibit") {
  field(DESC, "Loop$(L) Inhibit")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT)1w4,$(ADDR_LOOP_INH),1)UINT16")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  info(archive, "Monitor, 00:00:01, VAL")
}

#######################################################################
# Write records & integration with putCallback.template in genericIO

# ///
# /// This will define the user setpoint $(S)$(ND)Loop$(L):SPSet
# ///
substitute "P=$(S)$(ND)Loop$(L)"
substitute "C=SP"
substitute "OUT=$(S)$(ND)Loop$(L):SPSetActual"
substitute "IN=$(S)$(ND)Loop$(L):PV"
substitute "TOL=1"
substitute "TO=28800"
substitute "ST=0"
substitute "PREC=1"
include "putCallback.template"

# ///
# /// Calculate if we are in the window and not 'busy' in the callback logic
# /// This is just to provide a visual LED feedback for the user
# ///
record(calcout, "$(S)$(ND)Loop$(L):InWindowCalc") {
  field(PINI, "YES")
  field(INPA, "$(S)$(ND)Loop$(L):SPSetActual CP")
  field(INPB, "$(S)$(ND)Loop$(L):PV CP")
  field(INPC, "$(S)$(ND)Loop$(L):SPTolerance CP")
  field(INPD, "$(S)$(ND)Loop$(L):SPBusy CP")
  field(CALC, "(!D)&(ABS(A-B)<C)")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "$(S)$(ND)Loop$(L):InWindow PP")
}
record(bo, "$(S)$(ND)Loop$(L):InWindow") {
  field(ZNAM, "Not In Window")
  field(ONAM, "In Window")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the target setpoint. This is set via putCallback.template
# ///
record(ao, "$(S)$(ND)Loop$(L):SPSetActual") {
  field(DESC, "Loop$(L) Setpoint")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT)2w16,$(ADDR_LOOP_TSP),1)FLOAT32_BE")
  field(PREC, "1")
  field(FLNK, "$(S)$(ND)Loop$(L):SP")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Set the loop auto/manual mode 
# ///
record(bo, "$(S)$(ND)Loop$(L):AutoSet") {
  field(DESC, "Loop$(L) Auto/Man")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)1w6,$(ADDR_LOOP__AM),1)UINT16")  
  field(ZNAM, "Auto")
  field(ONAM, "Manual")
  field(FLNK, "$(S)$(ND)Loop$(L):Auto")
  info(archive, "Monitor, 00:00:01, VAL")
}

# /// 
# /// Inhibit the loop output 
# ///
record(bo, "$(S)$(ND)Loop$(L):InhibitSet") {
  field(DESC, "Set Loop$(L) Inhibit")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT)1w6,$(ADDR_LOOP_INH),1)UINT16")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(FLNK, "$(S)$(ND)Loop$(L):Inhibit")
  info(archive, "Monitor, 00:00:01, VAL")
}








